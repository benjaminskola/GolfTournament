using System;
//kunna använda listor
using System.Collections.Generic;
//hantera listor bettre 
using System.Linq;
//spara tävlingar
using System.IO;
using System.Threading;

class Program
{
    static string filePath = "tavlingar.txt";  // Filen där tävlingarna sparas

    static void Main(string[] args)
    {
        bool startMeny = true;

        Console.WriteLine("Välkommen Till Benjamins MiniGolf Tracker");
        Console.WriteLine();

        while (startMeny)
        {
            // Visa huvudmeny
            Console.WriteLine("Välj alternativ:");
            Console.WriteLine("1: Ny tävling");
            Console.WriteLine("2: Visa tidigare tävlingar");
            Console.WriteLine("0: Avsluta");
            string val = Console.ReadLine();

            switch (val)
            {
                case "1":
                    NyTävling(); // Starta en ny tävling
                    break;
                case "2":
                    VisaTidigareTävlingar(); // Visa tidigare tävlingar
                    break;
                case "0":
                    startMeny = false; // Avsluta programmet
                    break;
                default:
                    Console.WriteLine("Ogiltigt val. Försök igen.");
                    break;
            }
        }
    }

    // Funktion för att skapa en ny tävling
    static void NyTävling()
    {
        Console.Clear();
        Console.WriteLine("Skriv in ett namn för tävlingen:");
        string tavelingNamn = Console.ReadLine();

        // Kontrollera att tävlingsnamn inte är tomt
        while (string.IsNullOrWhiteSpace(tavelingNamn))
        {
            Console.WriteLine("Tävlingsnamn kan inte vara tomt. Försök igen:");
            tavelingNamn = Console.ReadLine();
        }

        // Felhantering för antal banor
        int antalBanor;
        while (true)
        {
            Console.WriteLine("Hur många banor spelar ni på?");
            if (int.TryParse(Console.ReadLine(), out antalBanor) && antalBanor > 0)
            {
                break;
            }
            Console.WriteLine("Ogiltigt värde. Ange ett positivt heltal.");
        }

        // Felhantering för antal spelare
        int antalSpelare;
        while (true)
        {
            Console.WriteLine("Hur många spelare?");
            if (int.TryParse(Console.ReadLine(), out antalSpelare) && antalSpelare > 0)
            {
                break;
            }
            Console.WriteLine("Ogiltigt värde. Ange ett positivt heltal.");
        }

        // Lista för att lagra spelare och deras resultat
        List<Player> players = new List<Player>();

        // Samla in information om varje spelare
        for (int i = 0; i < antalSpelare; i++)
        {
            Console.Clear(); // Rensa skärmen för varje spelare
            Console.WriteLine($"Skriv in namn för spelare {i + 1}:");
            string playerName = Console.ReadLine();

            // Kontrollera att namnet inte är tomt
            while (string.IsNullOrWhiteSpace(playerName))
            {
                Console.WriteLine("Spelarnamn kan inte vara tomt. Försök igen:");
                playerName = Console.ReadLine();
            }

            // Kontrollera att namnet inte är längre än 9 bokstäver
            if (playerName.Length > 9)
            {
                playerName = playerName.Substring(0, 9); // stoppar namnet från att vara över 9 tecken.
                Console.WriteLine("Namnet var för långt och har kapats till 9 bokstäver.");
                Thread.Sleep(1000); // Vänta en stund innan nästa inmatning
            }

            List<int> playerScores = new List<int>();

            for (int j = 0; j < antalBanor; j++)
            {
                Console.Clear(); // Rensa skärmen efter varje bana

                // Felhantering för spelarens slag
                int slag;
                while (true)
                {
                    Console.WriteLine($"Hur många slag tog {playerName} på bana {j + 1}?");
                    if (int.TryParse(Console.ReadLine(), out slag) && slag > 0)
                    {
                        break;
                    }
                    Console.WriteLine("Ogiltigt värde. Ange ett positivt heltal.");
                }

                playerScores.Add(slag);
            }

            // Lägg till spelaren i listan
            players.Add(new Player(playerName, playerScores));
        }

        // Beräkna median för varje spelare och sortera efter totala slag
        var sortedPlayers = players
            .Select(p => new PlayerResult
            {
                PlayerName = p.Name,
                TotalScore = p.Scores.Sum(),
                MedianScore = GetMedian(p.Scores)
            })
            .OrderBy(p => p.TotalScore) // Sortera efter total slag, lägsta först
            .ToList();

        // Visa resultaten
        Console.Clear(); // Rensa skärmen innan resultaten
        Console.WriteLine("\nResultat:");
        Console.WriteLine("==========================================================================");
        Console.WriteLine("Spelare   \tTotala slag\tMedian Slag per Bana");

        foreach (var player in sortedPlayers)
        {
            // Formatera utskriften så att poängen inte rör sig beroende på namn
            Console.WriteLine($"{player.PlayerName.PadRight(9)}\t{player.TotalScore.ToString().PadLeft(12)}\t{player.MedianScore.ToString("0.0").PadLeft(19)}");
        }

        // Spara resultaten till fil med tävlingsnamn
        SparaTavling(tavelingNamn, sortedPlayers);

        Console.WriteLine("\nTryck på en tangent för att gå tillbaka till huvudmenyn...");
        Console.ReadKey();
    }

    // Funktion för att beräkna medianvärdet för en lista
    static double GetMedian(List<int> scores)
    {
        var sortedScores = scores.OrderBy(score => score).ToList();
        int count = sortedScores.Count;

        if (count % 2 == 0)
        {
            // Om det är ett jämnt antal, ta medelvärdet av de två mittersta elementen
            return (sortedScores[count / 2 - 1] + sortedScores[count / 2]) / 2.0;
        }
        else
        {
            // Om det är ett udda antal, ta mittvärdet
            return sortedScores[count / 2];
        }
    }

    // Klass för att lagra spelarinformation
    class Player
    {
        public string Name { get; set; }
        public List<int> Scores { get; set; }

        public Player(string name, List<int> scores)
        {
            Name = name;
            Scores = scores;
        }
    }

    // Klass för att lagra resultatet från en tävling
    class PlayerResult
    {
        public string PlayerName { get; set; }
        public int TotalScore { get; set; }
        public double MedianScore { get; set; }
    }

    // Funktion för att spara tävlingen till en textfil
    static void SparaTavling(string tavelingNamn, List<PlayerResult> players)
    {
        try
        {
            using (StreamWriter sw = new StreamWriter(filePath, true))
            {
                sw.WriteLine("------------------------------------------------------------------");
                sw.WriteLine($"Tävling: {tavelingNamn} ({DateTime.Now})");
                foreach (var player in players)
                {
                    sw.WriteLine($"Spelare: {player.PlayerName}, Totala slag: {player.TotalScore}, Median slag: {player.MedianScore}");
                }
                sw.WriteLine("------------------------------------------------------------------");
            }
            Console.WriteLine("Tävlingen har sparats.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ett fel uppstod när tävlingen skulle sparas: {ex.Message}");
            Console.WriteLine("Tryck på en tangent för att fortsätta...");
            Console.ReadKey();
        }
    }

    // Funktion för att visa tidigare tävlingar från filen
    static void VisaTidigareTävlingar()
    {
        Console.Clear();

        try
        {
            if (File.Exists(filePath))
            {
                string[] lines = File.ReadAllLines(filePath);

                if (lines.Length == 0)
                {
                    Console.WriteLine("Filen finns men innehåller inga tävlingar.");
                    Console.WriteLine("\nTryck på en tangent för att gå tillbaka...");
                    Console.ReadKey();
                    return;
                }

                Console.WriteLine("Tidigare Tävlingar:");
                Console.WriteLine("=================================================");

                List<string> tavlingar = new List<string>();

                // Samla alla tävlingsnamn
                foreach (var line in lines)
                {
                    if (line.StartsWith("Tävling:"))
                    {
                        var tavelingNamn = line.Split(':')[1].Split('(')[0].Trim();
                        tavlingar.Add(tavelingNamn);
                    }
                }

                if (tavlingar.Count == 0)
                {
                    Console.WriteLine("Inga tävlingar hittades i filen.");
                    Console.WriteLine("\nTryck på en tangent för att gå tillbaka...");
                    Console.ReadKey();
                    return;
                }

                // Visa tävlingsnamn
                for (int i = 0; i < tavlingar.Count; i++)
                {
                    Console.WriteLine($"{i + 1}. {tavlingar[i]}");
                }

                // Välj en tävling med felhantering
                int val;
                while (true)
                {
                    Console.WriteLine("\nVälj en tävling (ange nummer) för att se resultaten eller 0 för att gå tillbaka:");
                    if (int.TryParse(Console.ReadLine(), out val) && val >= 0 && val <= tavlingar.Count)
                    {
                        break;
                    }
                    Console.WriteLine("Ogiltigt val. Försök igen.");
                }

                if (val == 0)
                {
                    return; // Gå tillbaka till huvudmenyn
                }

                VisaTävlingResultat(tavlingar[val - 1]);
            }
            else
            {
                Console.WriteLine("Inga tidigare tävlingar hittades. Filen 'tavlingar.txt' existerar inte.");
                Console.WriteLine("\nTryck på en tangent för att gå tillbaka...");
                Console.ReadKey();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ett fel uppstod när tidigare tävlingar skulle visas: {ex.Message}");
            Console.WriteLine("\nTryck på en tangent för att gå tillbaka...");
            Console.ReadKey();
        }
    }

    // Funktion för att visa resultaten för en specifik tävling
    static void VisaTävlingResultat(string tavelingNamn)
    {
        try
        {
            string[] lines = File.ReadAllLines(filePath);
            bool found = false;
            bool isCurrentTavling = false;

            Console.Clear();
            Console.WriteLine($"Resultat för tävlingen: {tavelingNamn}");
            Console.WriteLine("=================================================");

            foreach (var line in lines)
            {
                if (line.Contains($"Tävling: {tavelingNamn}"))
                {
                    isCurrentTavling = true;  // Hittade tävlingen, börja visa resultat
                    found = true;
                    Console.WriteLine(line);  // Skriv ut tävlingens namn och datum
                }
                else if (isCurrentTavling)
                {
                    // Visa resultaten för spelarna tills vi hittar en annan tävling
                    if (line.StartsWith("Tävling:"))
                    {
                        break;  // Sluta visa om vi hittar en ny tävling
                    }
                    else if (line.StartsWith("------------------------------------------------------------------"))
                    {
                        // Sluta visa om vi hittar slutet på tävlingen
                        break;
                    }
                    Console.WriteLine(line);  // Visa resultat för spelare
                }
            }

            if (!found)
            {
                Console.WriteLine("Resultaten för denna tävling kunde inte hittas.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ett fel uppstod när tävlingsresultaten skulle visas: {ex.Message}");
        }

        Console.WriteLine("\nTryck på en tangent för att gå tillbaka...");
        Console.ReadKey();
    }
}
